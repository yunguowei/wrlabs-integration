
# Default root password = incendia
# Hash generated by:
# echo incendia | mkpasswd -m sha-512 -s |sed -e 's/\$/\\$/g'

EXTRA_USERS_PARAMS = "usermod -p '\$6\$2uWvtnkZ.\$UZ2LBt0Ar.5ZROLVplh5/98yvKtphGgxgU6s3ARhlqPY4PKZXgZZNJahKq8dzRtqst6fAx7lTxGLChuNUd6sw.' root;"
INHERIT += "extrausers"

DISTRO = "Pulsar-Linux"
WRLINUX_RCPLVERSION = ".1"

OVERRIDES_append = "${@bb.utils.contains('DISTRO_FEATURES', 'ima', ':ima', '', d)}"
OVERRIDES_append = "${@':userkey' if os.path.exists(d.getVar('WR_USER_KEYS_DIR', True)) else ''}"

# Default runtime graphical manager
VIRTUAL-RUNTIME_graphical_init_manager = "lxdm"

# oe-core 2.0 compatibility
#EXTRA_BBMASK .= "|meta-oe/recipes-gnome/libgudev/"

# Remove dangling bbappends
EXTRA_BBMASK .= "|meta-intel/common/recipes-kernel/linux/linux-yocto-rt_3."
EXTRA_BBMASK .= "|meta-intel/common/recipes-kernel/linux/linux-yocto_3."
EXTRA_BBMASK .= "|meta-intel/meta-isg/meta-valleyisland/recipes-kernel/linux/linux-yocto_3.10.bbappend"
EXTRA_BBMASK .= "|wr-hac-agent/recipes-hac/hacweb/lighttpd_1.4.35.bbappend"
EXTRA_BBMASK .= "|meta-iot-cloud/recipes-support/nanomsg/nanomsg_1.0.0.bb"

# Remove incompatible packages
EXTRA_BBMASK .= "|meta-openembedded/meta-networking/recipes-support/talloc/talloc_2.1.1.bb"
EXTRA_BBMASK .= "|meta-openembedded/meta-networking/recipes-support/libldb/libldb_1.1.17.bb"

# Do not use AUTOREV for kern-tools
EXTRA_BBMASK .= "|wr-kernel/recipes-kernel/kern-tools/kern-tools-native_git.bbappend"

# Add package-name bbclass
INHERIT_DISTRO = " debian devshell sstate license "

#force override the distro name
DISTRO_NAME_forcevariable = "Pulsar Linux"

INITRAMFS_IMAGE_x86 = "initramfs-ostree-image"
INITRAMFS_IMAGE_x86-64 = "initramfs-ostree-image"
INITRAMFS_IMAGE_arm = "initramfs-ostree-image"

CUBE_GW_EXTRAS ?= ""

# Common installation *except* initramfs image
CUBE_COMMON_INSTALL = " \
    ${@bb.utils.contains('DISTRO_FEATURES', 'ima', 'packagegroup-ima', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'rpm-signing', 'packagegroup-rpm-signing', '', d)} \
    python-device-cloud \
"

EXTRA_WIFI_SW += " \
hostapd \
hostap-utils \
wireless-tools \
wpa-supplicant \
rtl8723bs-bt \
rtl8723bs \
"
EXTRA_MULTILIB = ""
EXTRA_MULTILIB_intel-corei7-64 = "lib32-glib-2.0"

EXTRA_X86_BOOT = ""
EXTRA_X86_BOOT_x86 = " \
    grub \
    ${@'kernel-initramfs' if d.getVar('INITRAMFS_IMAGE', True) else ''} \
"
EXTRA_X86_BOOT_x86-64 = " \
    grub-efi \
    ${@'kernel-initramfs' if d.getVar('INITRAMFS_IMAGE', True) else ''} \
"

CUBE_DESKTOP_EXTRA_INSTALL += " \
	${EXTRA_X86_BOOT} \
	${@bb.utils.contains('DISTRO_FEATURES', 'efi-secure-boot', 'packagegroup-efi-secure-boot', '', d)} \
"

CUBE_DOM_SERVER_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${CUBE_GW_EXTRAS} \
"
CUBE_DOM_E_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${CUBE_GW_EXTRAS} \
    ${EXTRA_WIFI_SW} \
    ${EXTRA_MULTILIB} \
"
CUBE_DOM_GW_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${CUBE_GW_EXTRAS} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'flatpak', '${CUBE_ESSENTIAL_EXTRA_INSTALL}', '', d)} \
"
CUBE_DOM_GW_GFX_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
    ${CUBE_GW_EXTRAS} \
"
CUBE_ESSENTIAL_EXTRA_INSTALL += " \
    kernel-image \
    ${CUBE_COMMON_INSTALL} \
    pulsar-upgrade-mgr \
    ${EXTRA_X86_BOOT} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'efi-secure-boot', 'packagegroup-efi-secure-boot', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'tpm', 'packagegroup-tpm', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'tpm2', 'packagegroup-tpm2', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'luks', 'packagegroup-luks', '', d)} \
"
CUBE_DOM_0_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_DOM0_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_DOM_1_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_BUILDER_EXTRA_INSTALL += " \
    ${CUBE_COMMON_INSTALL} \
"
CUBE_BUILDER_INITRAMFS_EXTRA_INSTALL += " \
    ${@bb.utils.contains('DISTRO_FEATURES', 'luks', 'packagegroup-luks-initramfs', '', d)} \
    ${@bb.utils.contains('DISTRO_FEATURES', 'ima', 'packagegroup-ima-initramfs', '', d)} \
"


# Turn off WHITELIST
PNWHITELIST_LAYERS = ""

# 1: create the signle large meta-package
# else: inhibit the individual packages
KERNEL_MODULE_COMBINED_PACKAGE = "1"
PERL_MODULE_COMBINED_PACKAGE = "1"

#upgrade netcat-openbsd priority to bigger than netcat
#Since libvirt-libvirtd needs netcat-openbsd instead of
#netcat
ALTERNATIVE_PRIORITY_netcat-openbsd = "120"

# Enable ldconfig
USE_LDCONFIG = "1"

# Fixup for raspberry pi
REMOVE_GRUB = ""
REMOVE_GRUB_rpi = "grub"
OVERC_COMMON_EXTENDED_remove = "${REMOVE_GRUB}"
RDEPENDS_packagegroup-builder-extended_remove_pn-packagegroup-builder = "${REMOVE_GRUB}"
SRCREV_pn-linux-raspberrypi = "${AUTOREV}"
EXTRA_BBMASK .= "|meta-raspberrypi/recipes-kernel/linux/linux-raspberrypi*"

# Zero out serial because it is handled by the installer
SERIAL_CONSOLES_pn-systemd-serialgetty = ""

# When using wr-iot-meta layer apply a bbappend else ignore it
WRIOTBBMASK = "${@bb.utils.contains('BBFILE_COLLECTIONS','wr-iot-meta','','|wrlabs-integration/recipes-wr-iot-meta/.*',d)}"
EXTRA_BBMASK .= "${WRIOTBBMASK}"

# Work around image-vm build class problem until it is fixed
EXTRA_BBMASK .= "|meta-virtualization/recipes-extended/images/cloud-image-controller.bb"
EXTRA_BBMASK .= "|meta-virtualization/recipes-extended/images/cloud-image-guest.bb"
BB_HASHDEP_WHITELIST = "(.*\..*:gcc-source.*\..*|.*\.do_rootfs:.*\..*|packagegroup\-.*\..*:.*\..*)"
BB_HASHDEP_DISABLE = "1"

# Use zeroconf to pickup avahi
DISTRO_FEATURES_append = " zeroconf"

# Define WindRiver identification for UEFI secure boot keys
# echo "WindRiverPulsar" | xxd -p
WR_SECURE_VENDOR_UUID = "57696e64-5269-7665-7250-756c7361720a"
# User configurable identification of signature owner
UEFI_SIG_OWNER_GUID = "${WR_SECURE_VENDOR_UUID}"

# By default the sample keys are used
# Override them if necessary
WR_KEYS_DIR = "${WR_SAMPLE_KEYS_DIR}"
WR_KEYS_DIR_userkey = "${WR_USER_KEYS_DIR}"
WR_RPM_KEYNAME = "Wind-River-Pulsar-Sample"
WR_RPM_KEYNAME_userkey = "Wind-River-Pulsar"
WR_RPM_PASSPHRASE = "pulsar"
WR_RPM_PASSPHRASE_userkey = "pulsar"
WR_IMA_PASSWORD = "pulsar"
WR_IMA_PASSWORD_userkey = "pulsar"

# Following will be passed to meta-secure-core
MOK_SB_KEYS_DIR = "${WR_KEYS_DIR}/mok_sb_keys"
UEFI_SB_KEYS_DIR = "${WR_KEYS_DIR}/uefi_sb_keys"
SYSTEM_TRUSTED_KEYS_DIR = "${WR_KEYS_DIR}/system_trusted_keys"
#EXTRA_SYSTEM_TRUSTED_KEYS_DIR = "${WR_EXTRA_SYSTEM_TRUSTED_KEYS_DIR}"
IMA_KEYS_DIR = "${WR_KEYS_DIR}/ima_keys"
RPM_KEYS_DIR = "${WR_KEYS_DIR}/rpm_keys"

RPM_GPG_NAME = "${WR_RPM_KEYNAME}"
RPM_GPG_PASSPHRASE = "${WR_RPM_PASSPHRASE}"
RPM_FSK_PASSWORD = "${WR_IMA_PASSWORD}"

FLATPAK_GPGDIR_ima = "${GPG_PATH}" 
FLATPAK_GPGID_ima  = "${RPM_GPG_NAME}"

